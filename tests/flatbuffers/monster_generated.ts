//automatically generated by TypeScript FlatBuffers Codegen, do not modify
import * as __fblib from "@mgit-at/typescript-flatbuffers-codegen";
export enum TypeEnum {
    a,
    b = 1,
    c = 2
}
export class ArrayStruct {
    array: Struct[] = [];
    static fromValues(array: Struct[]) {
        let __inst = new ArrayStruct();
        __inst.array = array;
        return __inst;
    }
    static fromZero(): ArrayStruct {
        return ArrayStruct.fromValues([]);
    }
    static __fbInit(__bb: __fblib.ByteBuffer, __bbPos: number): ArrayStruct {
        let __inst: ArrayStruct;
        if ((__inst = __bb.offsetLookup.get(__bbPos))) {
            return __inst;
        }
        __inst = new ArrayStruct();
        __bb.offsetLookup.set(__bbPos, __inst);
        let __ofArray = __bb.__offset(__bbPos, 4);
        if (__ofArray) {
            let __lenArray = __bb.__vector_len(__bbPos + __ofArray);
            let __vecPosArray = __bb.__vector(__bbPos + __ofArray);
            __inst.array = new __fblib.__array<Struct>(__lenArray);
            for (let __i = 0; __i < __lenArray; __i++) {
                __inst.array[__i] = Struct.__fbInit(__bb, __bb.__indirect(__vecPosArray + __i * 4));
            }
        }
        else {
            __inst.array = [];
        }
        return __inst;
    }
    static fromFlatbuffer(__buffer: Uint8Array, __continueLookup?: __fblib.Table): ArrayStruct {
        let __bb = new __fblib.ByteBuffer(__buffer);
        if (__continueLookup) {
            __bb.copyLookup(__continueLookup.__bb);
        }
        return ArrayStruct.__fbInit(__bb, __bb.readInt32(__bb.position()) + __bb.position());
    }
    copy(deepCopy: boolean = false): ArrayStruct {
        let __inst = new ArrayStruct();
        if (deepCopy) {
            __inst.array = this.array.slice();
        }
        else {
            __inst.array = this.array;
        }
        return __inst;
    }
    objectify() {
        let array = new __fblib.__array(this.array ? this.array.length : 0);
        let _array = this.array;
        if (this.array) {
            for (let __i = 0; __i < this.array.length; __i++) {
                array[__i] = this.array[__i].objectify();
            }
        }
        return {
            array: array
        };
    }
    buildJson() {
        return JSON.stringify(this.objectify());
    }
    __build(__builder: __fblib.Builder) {
        let __offset: number;
        if ((__offset = __builder.registerObject(this))) {
            return __offset;
        }
        let __ofArray: number = 0;
        if (this.array instanceof Array && this.array.length) {
            let array: number[] = [];
            for (let __i = 0; __i < this.array.length; __i++) {
                array[__i] = this.array[__i].__build(__builder);
            }
            __builder.startVector(16, this.array.length, 4);
            for (let __i = this.array.length - 1; __i >= 0; __i--) {
                __builder.addOffsetObj(array[__i], this.array[__i]);
            }
            __ofArray = __builder.endVector();
        }
        __builder.startObject(1, this);
        if (__ofArray) {
            __builder.addFieldVector(0, __ofArray, 0);
        }
        return __builder.endObject();
    }
    buildFlatbuffer() {
        let __builder = new __fblib.Builder();
        __builder.finish(this.__build(__builder));
        return __builder.bytes();
    }
}
export class Struct {
    id: number = 0;
    type: TypeEnum = 0;
    count: number = 0;
    enabled: boolean = false;
    static fromValues(id: number, type: TypeEnum, count: number, enabled: boolean) {
        let __inst = new Struct();
        __inst.id = id;
        __inst.type = type;
        __inst.count = count;
        __inst.enabled = enabled;
        return __inst;
    }
    static fromZero(): Struct {
        return Struct.fromValues(0, 0, 0, false);
    }
    static __fbInit(__bb: __fblib.ByteBuffer, __bbPos: number): Struct {
        let __inst: Struct;
        if ((__inst = __bb.offsetLookup.get(__bbPos))) {
            return __inst;
        }
        __inst = new Struct();
        __bb.offsetLookup.set(__bbPos, __inst);
        __inst.id = __bb.readInt32(__bbPos);
        __inst.type = __bb.readInt8(__bbPos + 4);
        __inst.count = __bb.readUint32(__bbPos + 8);
        __inst.enabled = !!__bb.readInt8(__bbPos + 12);
        return __inst;
    }
    static fromFlatbuffer(__buffer: Uint8Array, __continueLookup?: __fblib.Table): Struct {
        let __bb = new __fblib.ByteBuffer(__buffer);
        if (__continueLookup) {
            __bb.copyLookup(__continueLookup.__bb);
        }
        return Struct.__fbInit(__bb, __bb.readInt32(__bb.position()) + __bb.position());
    }
    copy(): Struct {
        let __inst = new Struct();
        __inst.id = this.id;
        __inst.type = this.type;
        __inst.count = this.count;
        __inst.enabled = this.enabled;
        return __inst;
    }
    objectify() {
        return {
            id: this.id,
            type: this.type,
            count: this.count,
            enabled: this.enabled
        };
    }
    buildJson() {
        return JSON.stringify(this.objectify());
    }
    __build(__builder: __fblib.Builder) {
        let __offset: number;
        if ((__offset = __builder.registerObject(this))) {
            return __offset;
        }
        __builder.startObject(4, this);
        if (this.id) {
            __builder.addFieldInt32(0, this.id, 0);
        }
        if (this.type) {
            __builder.addFieldInt8(1, this.type, 0);
        }
        if (this.count) {
            __builder.addFieldUint32(2, this.count, 0);
        }
        if (this.enabled) {
            __builder.addFieldInt8(3, +this.enabled, 0);
        }
        return __builder.endObject();
    }
    buildFlatbuffer() {
        let __builder = new __fblib.Builder();
        __builder.finish(this.__build(__builder));
        return __builder.bytes();
    }
}
